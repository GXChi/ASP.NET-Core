// <auto-generated />
using System;
using CloudNote.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CloudNote.Core.SqlServer.Migrations
{
    [DbContext(typeof(CloudNoteDbContext))]
    partial class CloudNoteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.AuthorityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("AuthorityEntity");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.FolderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FolderEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FolderEntityId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.NoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.AuthorityEntity", b =>
                {
                    b.HasOne("CloudNote.Domain.Entities.Areas.RoleEntity", null)
                        .WithMany("Authoritys")
                        .HasForeignKey("RoleEntityId");

                    b.HasOne("CloudNote.Domain.Entities.Areas.UserEntity", null)
                        .WithMany("Authoritys")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.RoleEntity", b =>
                {
                    b.HasOne("CloudNote.Domain.Entities.Areas.UserEntity", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.FolderEntity", b =>
                {
                    b.HasOne("CloudNote.Domain.Entities.FolderEntity", null)
                        .WithMany("NextFolder")
                        .HasForeignKey("FolderEntityId");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.RoleEntity", b =>
                {
                    b.Navigation("Authoritys");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.Areas.UserEntity", b =>
                {
                    b.Navigation("Authoritys");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CloudNote.Domain.Entities.FolderEntity", b =>
                {
                    b.Navigation("NextFolder");
                });
#pragma warning restore 612, 618
        }
    }
}
